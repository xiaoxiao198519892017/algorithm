给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

 

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

1.遍历法（思路）
用两个for循环遍历数组，定义i,从0开始，定义J，从i+1开始，然后判定nums[i][j] == target就返回，负责null或者异常

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int length = nums.length;
        for(int i=0;i<length;i++){
            for(int j=i+1;j<length;j++){
                if(nums[i]+nums[j] == target){
                      return new int[]{i,j};
                }
            }
        }
        return null;
    }
}  
  
2.HasnMap遍历法
用时间换空间，因为HashMap的查询效率接近常数
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int length = nums.length;
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<length;i++){
               int value = target - nums[i];
               if(map.containsKey(value)){
                   return new int[] {i,map.get(value)};
               }
               map.put(nums[i],i);
        }
        return null;
    }
}
